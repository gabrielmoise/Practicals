# 4 "lexer.mll"
 
open Keiko
open Parser 
open Tree 
open Lexing 

let lineno = ref 1

let make_hash n ps =
  let t = Hashtbl.create n in
  List.iter (fun (k, v) -> Hashtbl.add t k v) ps;
  t

(* A little table to recognize keywords *)
let kwtable = 
  make_hash 64
    [ ("begin", BEGIN); ("do", DO); ("if", IF ); ("else", ELSE); 
      ("end", END); ("then", THEN);
      ("var", VAR); ("while", WHILE); ("print", PRINT); ("newline", NEWLINE);
      ("integer", INTEGER); ("boolean", BOOLEAN); ("array", ARRAY); 
      ("of", OF); ("true", BOOLCONST 1); ("false",  BOOLCONST 0);
      ("and", MULOP And); ("div", MULOP Div); ("or", ADDOP Or);
      ("not", MONOP Not); ("mod", MULOP Mod); 
      ("local", LOCAL); ("in", IN)]

let lookup s = 
  try Hashtbl.find kwtable s with Not_found -> IDENT s

# 31 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\230\255\231\255\232\255\233\255\002\000\002\000\033\000\
    \242\255\243\255\244\255\245\255\246\255\247\255\248\255\249\255\
    \005\000\003\000\252\255\253\255\075\000\085\000\236\255\234\255\
    \238\255\239\255\237\255\134\000\252\255\253\255\254\255\051\000\
    \255\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\255\255\255\255\020\000\015\000\014\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \005\000\004\000\255\255\255\255\001\000\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\002\000\
    \255\255";
  Lexing.lex_default =
   "\002\000\000\000\000\000\000\000\000\000\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \255\255\255\255\000\000\000\000\255\255\255\255\000\000\000\000\
    \000\000\000\000\000\000\029\000\000\000\000\000\000\000\255\255\
    \000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\005\000\003\000\005\000\000\000\004\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \005\000\000\000\005\000\000\000\000\000\000\000\000\000\000\000\
    \016\000\015\000\008\000\010\000\012\000\009\000\018\000\023\000\
    \020\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\017\000\019\000\007\000\011\000\006\000\026\000\
    \022\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\014\000\032\000\013\000\024\000\025\000\
    \000\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\000\000\
    \030\000\000\000\000\000\000\000\000\000\000\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \031\000\000\000\000\000\000\000\021\000\000\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\028\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\005\000\255\255\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\005\000\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\000\
    \017\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\031\000\000\000\007\000\007\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\020\000\020\000\020\000\020\000\020\000\
    \020\000\020\000\020\000\020\000\020\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\255\255\
    \027\000\255\255\255\255\255\255\255\255\255\255\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \027\000\255\255\255\255\255\255\021\000\255\255\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\027\000";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 35 "lexer.mll"
                                                     s
# 173 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 36 "lexer.mll"
                        ( lookup s )
# 177 "lexer.ml"

  | 1 ->
let
# 37 "lexer.mll"
                    s
# 183 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 37 "lexer.mll"
                        ( NUMBER (int_of_string s) )
# 187 "lexer.ml"

  | 2 ->
# 38 "lexer.mll"
                        ( SEMI )
# 192 "lexer.ml"

  | 3 ->
# 39 "lexer.mll"
                        ( DOT )
# 197 "lexer.ml"

  | 4 ->
# 40 "lexer.mll"
                        ( COLON )
# 202 "lexer.ml"

  | 5 ->
# 41 "lexer.mll"
                        ( LPAR )
# 207 "lexer.ml"

  | 6 ->
# 42 "lexer.mll"
                        ( RPAR )
# 212 "lexer.ml"

  | 7 ->
# 43 "lexer.mll"
                        ( SUB )
# 217 "lexer.ml"

  | 8 ->
# 44 "lexer.mll"
                        ( BUS )
# 222 "lexer.ml"

  | 9 ->
# 45 "lexer.mll"
                        ( COMMA )
# 227 "lexer.ml"

  | 10 ->
# 46 "lexer.mll"
                        ( EQUAL )
# 232 "lexer.ml"

  | 11 ->
# 47 "lexer.mll"
                        ( ADDOP Plus )
# 237 "lexer.ml"

  | 12 ->
# 48 "lexer.mll"
                        ( MINUS )
# 242 "lexer.ml"

  | 13 ->
# 49 "lexer.mll"
                        ( MULOP Times )
# 247 "lexer.ml"

  | 14 ->
# 50 "lexer.mll"
                        ( RELOP Lt )
# 252 "lexer.ml"

  | 15 ->
# 51 "lexer.mll"
                        ( RELOP Gt )
# 257 "lexer.ml"

  | 16 ->
# 52 "lexer.mll"
                        ( RELOP Neq )
# 262 "lexer.ml"

  | 17 ->
# 53 "lexer.mll"
                        ( RELOP Leq )
# 267 "lexer.ml"

  | 18 ->
# 54 "lexer.mll"
                        ( RELOP Geq )
# 272 "lexer.ml"

  | 19 ->
# 55 "lexer.mll"
                        ( ASSIGN )
# 277 "lexer.ml"

  | 20 ->
# 56 "lexer.mll"
                        ( token lexbuf )
# 282 "lexer.ml"

  | 21 ->
# 57 "lexer.mll"
                        ( comment lexbuf; token lexbuf )
# 287 "lexer.ml"

  | 22 ->
# 58 "lexer.mll"
                        ( token lexbuf )
# 292 "lexer.ml"

  | 23 ->
# 59 "lexer.mll"
                        ( incr lineno; Source.note_line !lineno lexbuf;
                          token lexbuf )
# 298 "lexer.ml"

  | 24 ->
# 61 "lexer.mll"
                        ( BADTOK )
# 303 "lexer.ml"

  | 25 ->
# 62 "lexer.mll"
                        ( EOF )
# 308 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and comment lexbuf =
   __ocaml_lex_comment_rec lexbuf 27
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 65 "lexer.mll"
                        ( () )
# 320 "lexer.ml"

  | 1 ->
# 66 "lexer.mll"
                        ( incr lineno; Source.note_line !lineno lexbuf;
                          comment lexbuf )
# 326 "lexer.ml"

  | 2 ->
# 68 "lexer.mll"
                        ( comment lexbuf )
# 331 "lexer.ml"

  | 3 ->
# 69 "lexer.mll"
                        ( () )
# 336 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

;;

